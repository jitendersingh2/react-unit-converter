{"version":3,"sources":["components/converter/converter.js","App.js","serviceWorker.js","index.js"],"names":["Converter","temperatureUnits","volumeUnits","state","inputValue","value","isValid","unitOfMeasure","targetUnitOfMeasure","studentResponse","output","onInputChange","e","id","target","trim","setState","isValidInput","parseFloat","isValidUnit","iaAllInputsValid","_","toLowerCase","roundToTenthPlaces","num","Math","round","calculateOutput","preventDefault","inputNumericValue","baseUnit","targetUnit","calculatedResponse","convert","from","to","invalidInput","isResponseCorrect","this","Form","className","FormGroup","Label","for","Input","type","name","placeholder","onChange","invalid","Button","onClick","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e53213c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport convert from 'convert-units';\r\nimport './converter.css';\r\n\r\nclass Converter extends Component {\r\n    temperatureUnits = {\r\n        'celsius': 'C',\r\n        'fahrenheit': 'F',\r\n        'kelvin': 'K',\r\n        'rankine': 'R'\r\n    }\r\n\r\n    volumeUnits = {\r\n        'liters': 'l',\r\n        'tablespoons': 'tsp',\r\n        'cubic-inches': 'in3',\r\n        'cups': 'cup',\r\n        'cubic-feet': 'ft3',\r\n        'gallons': 'gal'\r\n    }\r\n\r\n    state = {\r\n        inputValue: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        unitOfMeasure: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        targetUnitOfMeasure: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        studentResponse: {\r\n            value: '',\r\n            isValid: true\r\n        },\r\n        output: ''\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        const { id } = e.target;\r\n        const value = e.target.value.trim();\r\n        this.setState({\r\n            [id]: {\r\n                ...this.state[id],\r\n                value\r\n            }\r\n        });\r\n    }\r\n\r\n    isValidInput = value => parseFloat(value) ? true : false\r\n\r\n    isValidUnit = value => this.temperatureUnits[value] || this.volumeUnits[value] ? true : false\r\n\r\n    iaAllInputsValid = _ => {\r\n        const { inputValue, unitOfMeasure, targetUnitOfMeasure } = this.state;\r\n        inputValue.isValid = this.isValidInput(inputValue.value);\r\n        unitOfMeasure.isValid = this.isValidUnit(unitOfMeasure.value.toLowerCase());\r\n        targetUnitOfMeasure.isValid = this.isValidUnit(targetUnitOfMeasure.value.toLowerCase());\r\n        \r\n        this.setState({ inputValue, unitOfMeasure, targetUnitOfMeasure });\r\n        return inputValue.isValid && unitOfMeasure.isValid && targetUnitOfMeasure.isValid;\r\n    }\r\n\r\n    roundToTenthPlaces = (num) => Math.round(10 * parseFloat(num))/10\r\n\r\n    calculateOutput = (e) => {\r\n        e.preventDefault();\r\n        if(!this.iaAllInputsValid()) {\r\n            this.setState({\r\n                output: 'invalid'\r\n            });\r\n            return ;\r\n        }\r\n        const { inputValue, unitOfMeasure, targetUnitOfMeasure, studentResponse } = this.state;\r\n        const inputNumericValue = parseFloat(inputValue.value);\r\n        const baseUnit = this.temperatureUnits[unitOfMeasure.value.toLowerCase()] || this.volumeUnits[unitOfMeasure.value.toLowerCase()];\r\n        const targetUnit = this.temperatureUnits[targetUnitOfMeasure.value.toLowerCase()] || this.volumeUnits[targetUnitOfMeasure.value.toLowerCase()];\r\n        let calculatedResponse = '';\r\n        try {\r\n            calculatedResponse = this.roundToTenthPlaces(convert(inputNumericValue).from(baseUnit).to(targetUnit));\r\n        } catch(e) {\r\n            this.setState({\r\n                output: 'invalid',\r\n                invalidInput: false\r\n            });\r\n            return ;\r\n        }\r\n        \r\n        const isResponseCorrect = calculatedResponse === this.roundToTenthPlaces(studentResponse.value);\r\n        this.setState(_ => ({\r\n            output: isResponseCorrect ? 'Correct' : 'Incorrect',\r\n            studentResponse: {\r\n                ...studentResponse,\r\n                isValid: isResponseCorrect\r\n            }\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { inputValue, unitOfMeasure, targetUnitOfMeasure, studentResponse, output } = this.state;\r\n        return ( \r\n            <Form className=\"unit-conversion-form\">\r\n                <FormGroup>\r\n                    <Label for=\"inputValue\" className=\"input-label\">Numeric Value</Label>\r\n                    <Input type=\"text\" name=\"inputValue\" id=\"inputValue\" placeholder=\"Enter Numeric Value\" value={inputValue.value} onChange={this.onInputChange} invalid={!inputValue.isValid} className={!inputValue.isValid ? 'isInvalid' : ''} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"unitOfMeasure\" className=\"input-label\">Unit of Measure</Label>\r\n                    <Input type=\"text\" name=\"unitOfMeasure\" id=\"unitOfMeasure\" placeholder=\"Enter Unit of Measure\" value={unitOfMeasure.value} onChange={this.onInputChange} invalid={!unitOfMeasure.isValid} className={!unitOfMeasure.isValid ? 'isInvalid' : ''} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"targetUnitOfMeasure\" className=\"input-label\">Target Unit of Measure</Label>\r\n                    <Input type=\"text\" name=\"targetUnitOfMeasure\" id=\"targetUnitOfMeasure\" placeholder=\"Enter Target Unit of Measure\" value={targetUnitOfMeasure.value} onChange={this.onInputChange} invalid={!targetUnitOfMeasure.isValid} className={!targetUnitOfMeasure.isValid ? 'isInvalid' : ''} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"studentResponse\" className=\"input-label\">Enter Student Response</Label>\r\n                    <Input type=\"text\" name=\"studentResponse\" id=\"studentResponse\" placeholder=\"Enter Student Response\" value={studentResponse.value} onChange={this.onInputChange} invalid={!studentResponse.isValid} className={!studentResponse.isValid ? 'isInvalid' : ''} />\r\n                </FormGroup>\r\n                <div className=\"text-right btn-wrapper\">\r\n                    <Button onClick={this.calculateOutput} color=\"primary\">Calculate Output</Button>\r\n                </div>\r\n                {output !== '' && (\r\n                    <div className=\"output-wrapper\">\r\n                        <span className=\"input-label\">Output</span>&nbsp;&nbsp;&nbsp;<span>{output}</span>\r\n                    </div>\r\n                )}\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Converter;","import React from 'react';\r\nimport './App.css';\r\nimport Converter from './components/converter/converter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        Unit Conversions\r\n      </header>\r\n      <Converter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}